/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.primus.lms;

import Data.CourseData;
import java.io.File;
import javax.swing.JFileChooser;
import DatabaseConnection.DBconnection;
import com.mysql.cj.result.LocalDateTimeValueFactory;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author smsak
 */
public class UploadCourseContents extends javax.swing.JFrame {

    /**
     * Creates new form UploadCourseContents
     */
    DefaultTableModel model;
    public UploadCourseContents() throws SQLException {
        initComponents();
        
        model = (DefaultTableModel) tblUploads.getModel();
        setUploadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUploads = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jlFilePath = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        tfFileBatch = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfCourseIDFile = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmHome = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmCourrentCourses = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eduverse - Uploads");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Uploads:");

        tblUploads.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Batch", "File", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUploads.getTableHeader().setResizingAllowed(false);
        tblUploads.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblUploads);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setText("Upload Content:");

        jSeparator1.setForeground(new java.awt.Color(51, 51, 51));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("File:");

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Delete File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSeparator2.setBackground(new java.awt.Color(102, 102, 102));
        jSeparator2.setForeground(new java.awt.Color(51, 51, 51));

        jlFilePath.setBackground(new java.awt.Color(255, 255, 255));

        btnUpload.setBackground(new java.awt.Color(0, 0, 0));
        btnUpload.setForeground(new java.awt.Color(255, 255, 255));
        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnBrowse.setBackground(new java.awt.Color(0, 0, 0));
        btnBrowse.setForeground(new java.awt.Color(255, 255, 255));
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Batch:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Course ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnBrowse)
                                    .addGap(34, 34, 34)
                                    .addComponent(btnUpload))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel2))
                                            .addGap(19, 19, 19))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel4))
                                            .addGap(18, 18, 18)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tfFileBatch)
                                        .addComponent(jlFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                        .addComponent(tfCourseIDFile)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(400, 400, 400))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jlFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFileBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(tfCourseIDFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
        );

        jmHome.setText("Home");

        jMenuItem1.setText("Course Contents");
        jmHome.add(jMenuItem1);

        jmCourrentCourses.setText("Current Courses");
        jmCourrentCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCourrentCoursesActionPerformed(evt);
            }
        });
        jmHome.add(jmCourrentCourses);

        jMenuBar1.add(jmHome);

        jMenu2.setText("Profile");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1006, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Connection connection;
        DBconnection dbc = new DBconnection();
        
        // Getting the selected filename from the table to remove it from the table and database.
        String filename = (String) model.getValueAt(tblUploads.getSelectedRow(), 2);
        
        String queryToRemoveContent = "DELETE FROM course_contents WHERE file_name = '" + filename + "';";
        
        try {
            connection = dbc.getConnect();
            Statement stm = connection.createStatement();
            stm.executeUpdate(queryToRemoveContent);
        } catch (SQLException ex) {
            Logger.getLogger(UploadCourseContents.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Couldn't Remove the file from the database. Please try again.");
            return;
        }
        model.removeRow(tblUploads.getSelectedRow());
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // variable for storing username from the loginpage through homepage.
    private String userName;

    // Initilizing file for getting selected file.
    File file = null;
    String fileName;
    
    // Function to get the file by jFileChooser.
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        file = chooser.getSelectedFile();
        jlFilePath.setText(file.getAbsolutePath());
        fileName = file.getName();
        
        if(!getFileExtension(file).equals("txt")){
            JOptionPane.showMessageDialog(this, "This is not a text file. Please select a text file.");
            btnUpload.setEnabled(false);
            return;
        }
        else{
            btnUpload.setEnabled(true);
        }
        
    }//GEN-LAST:event_btnBrowseActionPerformed
    
    Connection con = null;
    DBconnection con2 = new DBconnection();
    // Function to Upload file and other information about the file.
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        
        try {
            con = con2.getConnect();
            
            String storeFileQuery = "INSERT INTO course_contents VALUES (?, ?, ?, ?, ?, ?)";
            
            PreparedStatement preparedStat = con.prepareStatement(storeFileQuery);
            
            FileReader filereader = new FileReader(file);
            
            preparedStat.setString(1, userName);
            preparedStat.setString(2, tfCourseIDFile.getText());
            preparedStat.setInt(3, Integer.parseInt(tfFileBatch.getText()));
            preparedStat.setString(5, fileName);
            preparedStat.setString(6, date());
            
            preparedStat.setCharacterStream(4, filereader, (int)file.length());
            
            preparedStat.executeUpdate();
            
                   
            preparedStat.close();
            con.close();
            
            setUploadTableData();
            
            
        } catch (SQLException ex) {
            Logger.getLogger(UploadCourseContents.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UploadCourseContents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed
    
    // Function to activate the courses page.
    private void jmCourrentCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCourrentCoursesActionPerformed
        try {
            // TODO add your handling code here:
            Connection con = null;
            DBconnection dbc = new DBconnection();
            con = dbc.getConnect();
            
            Statement stm = con.createStatement();
            TeacherHomePage homepage = new TeacherHomePage();
            
            String queryForgettingCourses = "SELECT * FROM courses WHERE user_name = '" + userName + "';";
            
            ArrayList<CourseData> courseData = new ArrayList<CourseData>();
            
            ResultSet rst = stm.executeQuery(queryForgettingCourses);
            
            while(rst.next()){
                CourseData coursedata = new CourseData(rst.getString("course_name"), rst.getString("course_id"),
                        rst.getString("course_teacher"), rst.getInt("batch"), rst.getString("user_name"), rst.getString("class_time"));
                
                courseData.add(coursedata);
            }
            
            // On the basis of number of courses the teacher has it shows the information and removes the other panels from the frame.
            switch (courseData.size()) {
                case 1:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setVisibilityCourse1();
                    break;
                case 2:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setCourse2Data(courseData.get(1).getCourseName(), courseData.get(1).getBatch(), courseData.get(1).getClassSchedule());
                    homepage.setVisibilityCourse2();
                    break;
                case 3:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setCourse2Data(courseData.get(1).getCourseName(), courseData.get(1).getBatch(), courseData.get(1).getClassSchedule());
                    homepage.setCourse3Data(courseData.get(2).getCourseName(), courseData.get(2).getBatch(), courseData.get(2).getClassSchedule());
                    homepage.setVisibilityCourse3();
                    break;
                case 4:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setCourse2Data(courseData.get(1).getCourseName(), courseData.get(1).getBatch(), courseData.get(1).getClassSchedule());
                    homepage.setCourse3Data(courseData.get(2).getCourseName(), courseData.get(2).getBatch(), courseData.get(2).getClassSchedule());
                    homepage.setCourse4Data(courseData.get(3).getCourseName(), courseData.get(3).getBatch(), courseData.get(3).getClassSchedule());
                    homepage.setVisibilityCourse4();
                    break;
                case 5:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setCourse2Data(courseData.get(1).getCourseName(), courseData.get(1).getBatch(), courseData.get(1).getClassSchedule());
                    homepage.setCourse3Data(courseData.get(2).getCourseName(), courseData.get(2).getBatch(), courseData.get(2).getClassSchedule());
                    homepage.setCourse4Data(courseData.get(3).getCourseName(), courseData.get(3).getBatch(), courseData.get(3).getClassSchedule());
                    homepage.setCourse5Data(courseData.get(4).getCourseName(), courseData.get(4).getBatch(), courseData.get(4).getClassSchedule());
                    homepage.setVisibilityCourse5();
                    break;
                case 6:
                    homepage.setCourse1Data(courseData.get(0).getCourseName(), courseData.get(0).getBatch(), courseData.get(0).getClassSchedule());
                    homepage.setCourse2Data(courseData.get(1).getCourseName(), courseData.get(1).getBatch(), courseData.get(1).getClassSchedule());
                    homepage.setCourse3Data(courseData.get(2).getCourseName(), courseData.get(2).getBatch(), courseData.get(2).getClassSchedule());
                    homepage.setCourse4Data(courseData.get(3).getCourseName(), courseData.get(3).getBatch(), courseData.get(3).getClassSchedule());
                    homepage.setCourse5Data(courseData.get(4).getCourseName(), courseData.get(4).getBatch(), courseData.get(4).getClassSchedule());
                    homepage.setCourse6Data(courseData.get(5).getCourseName(), courseData.get(5).getBatch(), courseData.get(5).getClassSchedule());
                    break;
                default:
                    break;
            }
            homepage.setUserName(userName);
            dispose();
            homepage.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(UploadCourseContents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmCourrentCoursesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadCourseContents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadCourseContents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadCourseContents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadCourseContents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UploadCourseContents().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(UploadCourseContents.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnUpload;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jlFilePath;
    private javax.swing.JMenuItem jmCourrentCourses;
    private javax.swing.JMenu jmHome;
    private javax.swing.JTable tblUploads;
    private javax.swing.JTextField tfCourseIDFile;
    private javax.swing.JTextField tfFileBatch;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * @param userName the userName to set
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    
   public String date(){
       LocalDateTime now = LocalDateTime.now();
       DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
       
       String dateTime = now.format(format);
       return dateTime;
   }
   
   
   // Function returns file extension of the selected file.
   public String getFileExtension(File file) {
        String name = file.getName();
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf + 1);
    }
   
   public void setUploadTableData() throws SQLException{
       String queryForGettingData = "SELECT * FROM course_contents WHERE user_name = '" + userName + "';";
       Connection connection = null;
       DBconnection dbc = new DBconnection();
       connection = dbc.getConnect();
       
       Statement stm = (Statement) connection.createStatement();
       ResultSet rs = stm.executeQuery(queryForGettingData);
       
       while(rs.next()){
           model.insertRow(tblUploads.getRowCount(), new Object[]{
               rs.getString("course_id"),
               rs.getInt("batch"),
               rs.getString("file_name"),
               rs.getString("upload_date")
           });
       }
       stm.close();
       connection.close();
   }
 

}


